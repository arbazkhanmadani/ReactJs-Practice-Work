UseEffect Hooks =>
------------------------------------------------

The useEffect Hook allows you to perform side effects in your components.
Some examples of side effects are: fetching data, directly updating the DOM, and timers.
useEffect accepts two arguments. The second argument is optional.
useEffect(<function>, <dependency>).
----------------------------------------

But wait!! It keeps counting even though it should only count once!
useEffect runs on every render. That means that when the count changes, a render happens, 
which then triggers another effect.
This is not what we want. There are several ways to control when side effects run.
We should always include the second parameter which accepts an array. We can optionally pass
dependencies to useEffect in this array.
-----------------------------------------



WE CAN USE IT BY THREE WAY---------

1. No dependency passed:

    useEffect(() => {
    //Runs on every render
    });
This will run in looping infinite.



2. An empty array:

    useEffect(() => {
    //Runs only on the first render
    }, []);
This will run only once for all the state changes.



3. Props or state values:
    useEffect(() => {
        //Runs on the first render And any time any dependency value changes
    }, [prop, state]);
This will run only once and -> number of time on the updation of the state and props specified.
